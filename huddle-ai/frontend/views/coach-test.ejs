<%- include('layout', { body: `
    <div class="container py-4">
        <div class="row">
            <div class="col-lg-8 mx-auto">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title mb-0">
                            <i class="fas fa-comments me-2"></i>
                            Test Coach: <%= coach.name %>
                        </h3>
                    </div>
                    <div class="card-body">
                        <!-- Coach Info -->
                        <div class="row mb-4">
                            <div class="col-md-3 text-center">
                                <% if (coach.appearance && coach.appearance.avatarUrl) { %>
                                    <img src="<%= coach.appearance.avatarUrl %>" alt="<%= coach.name %>" 
                                         class="coach-avatar rounded-circle mb-2">
                                <% } else { %>
                                    <div class="coach-avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center mb-2">
                                        <i class="fas fa-robot fa-2x"></i>
                                    </div>
                                <% } %>
                                <h5 class="fw-bold"><%= coach.name %></h5>
                                <p class="text-muted small"><%= coach.expertise?.primaryDomain || 'General Coach' %></p>
                            </div>
                            <div class="col-md-9">
                                <h6 class="fw-bold mb-2">Coach Profile:</h6>
                                <p class="text-muted mb-3"><%= coach.description || 'This coach is ready to help you achieve your goals.' %></p>
                                
                                <div class="row">
                                    <div class="col-sm-6">
                                        <small class="text-muted d-block">Communication Style:</small>
                                        <span class="badge bg-primary"><%= coach.personality?.communicationStyle || 'Supportive' %></span>
                                    </div>
                                    <div class="col-sm-6">
                                        <small class="text-muted d-block">Approach:</small>
                                        <span class="badge bg-success"><%= coach.personality?.approachMethod || 'Balanced' %></span>
                                    </div>
                                </div>
                            </div>
                        </div>
    
                        <!-- Chat Interface -->
                        <div class="chat-container">
                            <div class="chat-header bg-light p-3 rounded-top">
                                <div class="d-flex align-items-center">
                                    <div class="status-indicator bg-success rounded-circle me-2"></div>
                                    <strong>Test Conversation</strong>
                                    <small class="text-muted ms-auto">Try asking questions or starting a conversation</small>
                                </div>
                            </div>
                            
                            <div class="chat-messages" id="chatMessages">
                                <div class="message coach-message">
                                    <div class="message-avatar">
                                        <% if (coach.appearance && coach.appearance.avatarUrl) { %>
                                            <img src="<%= coach.appearance.avatarUrl %>" alt="<%= coach.name %>" class="rounded-circle">
                                        <% } else { %>
                                            <div class="avatar-placeholder bg-primary text-white rounded-circle d-flex align-items-center justify-content-center">
                                                <i class="fas fa-robot"></i>
                                            </div>
                                        <% } %>
                                    </div>
                                    <div class="message-content">
                                        <div class="message-bubble coach">
                                            <p class="mb-1">Hello! I'm <%= coach.name %>, your AI coach. I'm here to help you with <%= coach.expertise?.primaryDomain || 'your goals' %>. What would you like to work on today?</p>
                                            <small class="text-muted">Just now</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="chat-input bg-light p-3 rounded-bottom">
                                <form id="chatForm" class="d-flex gap-2">
                                    <input type="text" class="form-control" id="messageInput" 
                                           placeholder="Type your message..." maxlength="500">
                                    <button type="submit" class="btn btn-primary" id="sendButton">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </form>
                                <div class="mt-2">
                                    <small class="text-muted">
                                        <i class="fas fa-info-circle me-1"></i>
                                        This is a test environment. Real coaching sessions will have voice interaction.
                                    </small>
                                </div>
                            </div>
                        </div>
    
                        <!-- Suggested Questions -->
                        <div class="mt-4">
                            <h6 class="fw-bold mb-3">Try These Sample Questions:</h6>
                            <div class="row" id="sampleQuestions">
                                <!-- Sample questions will be populated by JavaScript -->
                            </div>
                        </div>
    
                        <!-- Actions -->
                        <div class="d-flex justify-content-between mt-4">
                            <a href="/coaches/<%= coach.id %>" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Back to Coach
                            </a>
                            <div>
                                <button type="button" class="btn btn-outline-warning me-2" onclick="clearChat()">
                                    <i class="fas fa-broom me-2"></i>Clear Chat
                                </button>
                                <a href="/meetings/schedule/<%= coach.id %>" class="btn btn-success">
                                    <i class="fas fa-calendar-plus me-2"></i>Schedule Real Session
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <style>
    .coach-avatar {
        width: 80px;
        height: 80px;
        object-fit: cover;
    }
    
    .chat-container {
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        overflow: hidden;
    }
    
    .chat-messages {
        height: 400px;
        overflow-y: auto;
        padding: 1rem;
        background-color: #f8f9fa;
    }
    
    .message {
        display: flex;
        margin-bottom: 1rem;
        animation: fadeIn 0.3s ease-in;
    }
    
    .message.user-message {
        flex-direction: row-reverse;
    }
    
    .message-avatar {
        width: 40px;
        height: 40px;
        margin: 0 0.5rem;
    }
    
    .message-avatar img,
    .avatar-placeholder {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .avatar-placeholder {
        font-size: 1rem;
    }
    
    .message-content {
        flex: 1;
        max-width: 70%;
    }
    
    .message-bubble {
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        position: relative;
    }
    
    .message-bubble.coach {
        background-color: #e3f2fd;
        border-bottom-left-radius: 0.25rem;
    }
    
    .message-bubble.user {
        background-color: #e8f5e8;
        border-bottom-right-radius: 0.25rem;
        margin-left: auto;
    }
    
    .status-indicator {
        width: 8px;
        height: 8px;
        animation: pulse 2s infinite;
    }
    
    .sample-question {
        text-align: left;
        white-space: normal;
        height: auto;
        padding: 0.5rem;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
    
    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        background-color: #e3f2fd;
        border-radius: 1rem;
        border-bottom-left-radius: 0.25rem;
    }
    
    .typing-dots {
        display: flex;
        gap: 0.25rem;
    }
    
    .typing-dots span {
        width: 6px;
        height: 6px;
        background-color: #999;
        border-radius: 50%;
        animation: typing 1.4s infinite;
    }
    
    .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
    .typing-dots span:nth-child(3) { animation-delay: 0.4s; }
    
    @keyframes typing {
        0%, 60%, 100% { transform: translateY(0); }
        30% { transform: translateY(-10px); }
    }
    </style>
    
    <script>
    // Global variables
    const chatMessages = document.getElementById('chatMessages');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const chatForm = document.getElementById('chatForm');
    
    // Coach data - safely extracted from server-side variables
    const coachData = {
        id: '<%= coach.id %>',
        name: '<%= coach.name %>',
        hasAvatar: "<%= (coach.appearance && coach.appearance.avatarUrl) ? 'true' : 'false' %>",
        avatarUrl: "<%= (coach.appearance && coach.appearance.avatarUrl) ? coach.appearance.avatarUrl : '' %>",
        domain: '<%= (coach.expertise && coach.expertise.primaryDomain) ? coach.expertise.primaryDomain : "career" %>'
    };
    
    // Sample questions for different domains
    const sampleQuestions = {
        'interview': [
            'Can you help me practice the "Tell me about yourself" question?',
            'How should I handle behavioral interview questions?',
            'What are some good questions to ask the interviewer?'
        ],
        'sales': [
            'How do I handle price objections?',
            'Can you help me practice my elevator pitch?',
            'What are effective closing techniques?'
        ],
        'language': [
            'Can we practice basic conversation?',
            'Help me with pronunciation of difficult words',
            'How do I improve my grammar?'
        ],
        'career': [
            'How do I set better career goals?',
            'What skills should I develop for leadership?',
            'How can I improve my work-life balance?'
        ]
    };
    
    // Initialize sample questions
    function initializeSampleQuestions() {
        const questions = sampleQuestions[coachData.domain] || sampleQuestions['career'];
        const container = document.getElementById('sampleQuestions');
        
        questions.forEach(function(question) {
            const col = document.createElement('div');
            col.className = 'col-md-4 mb-2';
            col.innerHTML = 
                '<button class="btn btn-outline-secondary btn-sm w-100 sample-question" onclick="askSampleQuestion(this)">' +
                question +
                '</button>';
            container.appendChild(col);
        });
    }
    
    // Scroll to bottom of chat
    function scrollToBottom() {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Add typing indicator
    function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message coach-message typing-indicator-message';
        
        const avatarHtml = coachData.hasAvatar 
            ? '<img src="' + coachData.avatarUrl + '" alt="' + coachData.name + '" class="rounded-circle">'
            : '<div class="avatar-placeholder bg-primary text-white rounded-circle d-flex align-items-center justify-content-center"><i class="fas fa-robot"></i></div>';
        
        typingDiv.innerHTML = 
            '<div class="message-avatar">' + avatarHtml + '</div>' +
            '<div class="message-content">' +
                '<div class="typing-indicator">' +
                    '<div class="typing-dots">' +
                        '<span></span>' +
                        '<span></span>' +
                        '<span></span>' +
                    '</div>' +
                    '<span class="ms-2 text-muted">Thinking...</span>' +
                '</div>' +
            '</div>';
        
        chatMessages.appendChild(typingDiv);
        scrollToBottom();
        return typingDiv;
    }
    
    // Remove typing indicator
    function hideTypingIndicator() {
        const typingIndicator = document.querySelector('.typing-indicator-message');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
    
    // Add message to chat
    function addMessage(message, isUser) {
        if (typeof isUser === 'undefined') isUser = false;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message ' + (isUser ? 'user-message' : 'coach-message');
        
        const avatarHtml = isUser 
            ? '<div class="avatar-placeholder bg-success text-white rounded-circle d-flex align-items-center justify-content-center"><i class="fas fa-user"></i></div>'
            : (coachData.hasAvatar 
                ? '<img src="' + coachData.avatarUrl + '" alt="' + coachData.name + '" class="rounded-circle">'
                : '<div class="avatar-placeholder bg-primary text-white rounded-circle d-flex align-items-center justify-content-center"><i class="fas fa-robot"></i></div>');
        
        messageDiv.innerHTML = 
            '<div class="message-avatar">' + avatarHtml + '</div>' +
            '<div class="message-content">' +
                '<div class="message-bubble ' + (isUser ? 'user' : 'coach') + '">' +
                    '<p class="mb-1">' + message + '</p>' +
                    '<small class="text-muted">Just now</small>' +
                '</div>' +
            '</div>';
        
        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    }
    
    // Send message to coach
    async function sendMessage(message) {
        if (!message.trim()) return;
        
        // Add user message
        addMessage(message, true);
        
        // Show typing indicator
        const typingIndicator = showTypingIndicator();
        
        // Disable input
        messageInput.disabled = true;
        sendButton.disabled = true;
        
        try {
            const response = await fetch('/coaches/' + coachData.id + '/test', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message })
            });
            
            const data = await response.json();
            
            // Remove typing indicator
            hideTypingIndicator();
            
            if (response.ok) {
                // Add coach response
                addMessage(data.response);
            } else {
                addMessage('I apologize, but I am having trouble responding right now. Please try again.');
            }
        } catch (error) {
            console.error('Error:', error);
            hideTypingIndicator();
            addMessage('Sorry, I am experiencing technical difficulties. Please try again later.');
        } finally {
            // Re-enable input
            messageInput.disabled = false;
            sendButton.disabled = false;
            messageInput.focus();
        }
    }
    
    // Handle form submission
    chatForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const message = messageInput.value.trim();
        if (message) {
            sendMessage(message);
            messageInput.value = '';
        }
    });
    
    // Handle Enter key
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            chatForm.dispatchEvent(new Event('submit'));
        }
    });
    
    // Sample question handler
    function askSampleQuestion(button) {
        const question = button.textContent.trim();
        messageInput.value = question;
        sendMessage(question);
        messageInput.value = '';
    }
    
    // Clear chat
    function clearChat() {
        if (confirm('Are you sure you want to clear the chat history?')) {
            // Remove all messages except the initial greeting
            const messages = chatMessages.querySelectorAll('.message');
            for (let i = 1; i < messages.length; i++) {
                messages[i].remove();
            }
        }
    }
    
    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeSampleQuestions();
        messageInput.focus();
    });
    </script>
` }) %>
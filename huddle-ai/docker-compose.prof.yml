version: '3.8'
services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - API_URL=https://api.yourdomain.com
      - LIVEKIT_URL=wss://livekit.yourdomain.com
    volumes:
      - ./uploads/avatars:/app/public/avatars:ro
      - ./uploads/recordings:/app/public/recordings:ro
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      replicas: 2

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_USER=huddle_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=huddle_ai
      - REDIS_URL=redis://redis:6379
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - LIVEKIT_URL=wss://livekit.yourdomain.com
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - mysql
      - redis
    restart: unless-stopped
    deploy:
      replicas: 3

  ai-agents:
    build: 
      context: ./ai-agents
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - LIVEKIT_URL=wss://livekit.yourdomain.com
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - livekit
      - redis
    restart: unless-stopped
    deploy:
      replicas: 5

  livekit:
    image: livekit/livekit-server:v1.4.3
    ports:
      - "7880:7880"
      - "7881:7881/udp"
      - "50000-60000:50000-60000/udp"
    volumes:
      - ./livekit.prod.yaml:/etc/livekit.yaml
    command: --config /etc/livekit.yaml
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=huddle_ai
      - MYSQL_USER=huddle_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/utils/db.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql.prod.cnf:/etc/mysql/conf.d/custom.cnf
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
      - ./redis.prod.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge